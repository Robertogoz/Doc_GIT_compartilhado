GIT
O GIT é um sistema distribuído de versionamento de código que foi desenvolvido em 2005 pela comunidade de desenvolvimento do Linux com a ideia de se tornar um sistema padrão de versionamento de código

Suas principais características são:

Velocidade
Design simples
Suporte para desenvolvimento não lineares
Completamente Distribuído
Capaz de cuidas de projetos de larga escala como o próprio Linux kernel com eficiência
A principal diferença entre o GIT e os outros VCS é a maneira que o GIT “pensa” sobre os dados.

O GIT trabalha versionando os arquivos como series de snapshots, com GIT toda vez que você faz um commit ou salva os dados do seu projeto, o git “cria uma imagem” dos arquivos do seu commit, para aumentar a eficiência

Os arquivos em um repositorio GIT possuem normalmente 3 estados:

Modified : Significa que você alterou um arquivo porem ele ainda não foi “commitado” ainda
Staged : Quando um arquivo esta staged significa que ele foi marcado para ser “commitado”, ou seja, ele já foi adicionado com o git add para ser commitado
Committed : Esse termo significa que o arquivo já foi commitado e esta seguramente armazenado no seu repositorio local, virando um novo snapshot
Além desses estados citados acima, ainda existe o estado untracked que significa que um arquivo é novo ou alterado, porem ainda não foi adicionado ao repositorio anteriormente

Repositório
O primeiro é o repositório, local físico onde os arquivos e suas cópias ficarão 
armazenados, o repositório pode ser local ou remoto.
 git init para iniciar um novo repositório
   
   Branch
Branches são os ramos, cópias do código original que podem ser manipuladas de forma 
livre, sem afetar as funcionalidades em produção no código-fonte.
Isso permite que todas as alterações sejam realizadas de forma segura, sem que erros 
ocorram na cópia principal do projeto.
 git checkout -b " nome da nova branch " - permite criar e mudar uma nova branch
 git branch - permite listar e ver qual branch está ativa
 git checkout " nome da branch " - permite mudar para uma nova branch
 git pull - atualiza a branch atualmente ativa
 git push - envia atualizações para as nuvens na branch ativa.

   Merge
Após a finalização de um trabalho em um Branch, é necessário realizar o Merge, fundir a 
cópia e seus arquivos modificados com o ramo principal do projeto.
 git merge " branch a receber o merge " - permite fazer o merge com a branch ativa
 atualmente com outra branch.

  Push Request
O Push Request é o envio das modificações após o Merge para o repositório central, para que 
todas as outras pessoas que atuam no desenvolvimento possam atualizar suas cópias e revisar o 
código criado, verificando conflitos com seus próprios trabalhos.

   Pull Request
O Pull Request é utilizado quando outra pessoa que atua no desenvolvimento muda o ramo 
principal no repositório central, puxando as modificações realizadas para a sua máquina, 
fundindo a nova versão com o seu código local.
 
 Fork
Trata-se do comando de cópia de um repositório remoto para a máquina local, realizado sempre 
que vamos começar a trabalhar em um projeto que já existe.

Comandos

git init : inicia o git em um diretório

git add "file_name" : adiciona arquivos ao commit, maneira mais fácil de dizer quais arquivos você quer adicionar ou alterar no seu repositorio, possui variações como usar . como parâmetro para enviar todos os arquivos do diretório e dos subdiretórios

git commit -m “commit message” : realiza o commit dos arquivos separados para commit, ele requer uma mensagem de commit para conseguirmos saber o que foi alterado de um commit para o outro

git push origin branch_name : Envia arquivos do repositorio local para o repositorio remoto(GitHub)

git pull origin branch_name : recebe arquivos do repositorio remoto no seu repositorio local(usar sempre antes de fazer qualquer modificação no seu projeto afim de ter a versão mais atualizada do projeto), esse comando é uma junção do git fetch + git merge

git clone repository_name : baixa todos os arquivos de um repositorio remoto no seu repositorio local(usar quando começar o projeto)

git status : lista os arquivos que estão sendo monitorados(arquivos staged, modified, untracked entre outros)

git fetch : recebe os arquivos do repositorio remoto sem os substitui-los, podemos usar para comparar com os arquivos locais e tambem trazer branches do repositorio remoto para seu repositorio local

git merge "branch_name" : Atualiza a branch que esta sendo apontada com os arquivos da branch passada por parametro, ou por uma branch remota recebida pelo git fetch, podemos também fazer merge de 2 branches locais

git rebase "branch_name" : Recebe os commits de outra branch na sua branch atual afim de ter todos os commits de ambas as branches intactas em uma só, o resultado seria o mesmo do merge, porem mais organizado e mais perigoso se for feito em repositorios remotos com o uso de mais desenvolvedores

git branch “branch_name” : Comando utilizado para criar uma branch a partir do snapshot da sua branch atual, se você utiliza-lo sem nenhum parametro será retornado uma lista com todos as suas branches

git checkout “branch_name” : Selecionar a branch passada por parametro, quando usamos esse comando o ponteiro HEAD começa a apontar para essa branch em especifico, se utilizarmos o -b junto, nós iremos criar uma branch e já selecionarmos ela pra uso

git log : Recebe um registro com todos os commits feitos e algumas propriedades sobre eles, esse comando tem variações

git restore "filename" : Restaura arquivos da work tree podendo ser do index ou de outro commit, se utilizarmos ele com o parametro —staged para especificar o local de restauração utilizando o indice do arquivo especifico, fazendo a mesma função do git reset

git reset HEAD~ : Volta a posição do ponteiro HEAD em 1 commit, dependendo do parametro que você passar para ele alterará a area de staging e working(arquivos), seus principais parametros são:

—soft: Muda o Ponteiro HEAD de lugar
—mixed ou sem parametro: Muda o Ponteiro HEAD de lugar e altera a area de stage para a da versão atualmente apontada pelo HEAD
—hard: Muda o Ponteiro HEAD de lugar e altera a area de stage e as alterações no diretorio de working para a da versão atualmente apontada pelo HEAD
git config alias.”command_shorthand” “command” : configura (se quiser configurar globalmente usar —global) comandos(podendo colocar varios parametros) com um novo nome(preferencialmente abreviado), é muito util para aumentar a produtividade

origin é uma abreviação dada pro repositorio remoto usado para clona-lo para seu repositorio local

HEAD é o ponteiro que aponta para a branch em que você esta trabalhando no momento